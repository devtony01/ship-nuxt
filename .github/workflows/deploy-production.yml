name: "Deploy to Production"

on:
  push:
    branches:
      - main
    paths:
      - apps/**
      - packages/**
      - k8s/**
      - .github/workflows/deploy-production.yml
  workflow_dispatch:
    inputs:
      service:
        description: 'Service to deploy'
        required: true
        default: 'both'
        type: choice
        options:
        - both
        - api
        - web

env:
  AWS_REGION: us-east-1
  EKS_CLUSTER_NAME: ship-nuxt-v1

jobs:
  # Build and push API image
  build-api:
    name: Build & Push API
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && (inputs.service == 'api' || inputs.service == 'both')) }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Debug AWS credentials
      run: |
        echo "Checking if AWS credentials are available..."
        if [ -z "${{ secrets.AWS_ACCESS_KEY_ID }}" ]; then
          echo "‚ùå AWS_ACCESS_KEY_ID secret is empty or not set"
        else
          echo "‚úÖ AWS_ACCESS_KEY_ID secret is set (length: ${#AWS_ACCESS_KEY_ID})"
        fi
        if [ -z "${{ secrets.AWS_SECRET_ACCESS_KEY }}" ]; then
          echo "‚ùå AWS_SECRET_ACCESS_KEY secret is empty or not set"
        else
          echo "‚úÖ AWS_SECRET_ACCESS_KEY secret is set (length: ${#AWS_SECRET_ACCESS_KEY})"
        fi
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v2

    - name: Create ECR repository if it doesn't exist
      run: |
        aws ecr describe-repositories --repository-names ship-nuxt-api --region ${{ env.AWS_REGION }} || \
        aws ecr create-repository --repository-name ship-nuxt-api --region ${{ env.AWS_REGION }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and push API image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./apps/api/Dockerfile
        push: true
        tags: |
          306011031365.dkr.ecr.us-east-1.amazonaws.com/ship-nuxt-api:${{ github.sha }}
          306011031365.dkr.ecr.us-east-1.amazonaws.com/ship-nuxt-api:latest
        build-args: |
          APP_ENV=production

  # Build and push Web image
  build-web:
    name: Build & Push Web
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && (inputs.service == 'web' || inputs.service == 'both')) }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v2

    - name: Create ECR repository if it doesn't exist
      run: |
        aws ecr describe-repositories --repository-names ship-nuxt-web --region ${{ env.AWS_REGION }} || \
        aws ecr create-repository --repository-name ship-nuxt-web --region ${{ env.AWS_REGION }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and push Web image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./apps/web/Dockerfile
        push: true
        tags: |
          306011031365.dkr.ecr.us-east-1.amazonaws.com/ship-nuxt-web:${{ github.sha }}
          306011031365.dkr.ecr.us-east-1.amazonaws.com/ship-nuxt-web:latest
        build-args: |
          APP_ENV=production

  # Deploy API
  deploy-api:
    name: Deploy API
    runs-on: ubuntu-latest
    needs: build-api
    if: always() && needs.build-api.result == 'success'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER_NAME }}

    - name: Deploy API
      env:
        NAMESPACE: production
        IMAGE_TAG: ${{ github.sha }}
        ECR_REGISTRY: 306011031365.dkr.ecr.us-east-1.amazonaws.com
        SSL_CERTIFICATE_ARN: ${{ vars.SSL_CERTIFICATE_ARN }}
      run: |
        # Create namespace
        kubectl apply -f k8s/deployments/namespace.yaml
        
        # Deploy API
        envsubst < k8s/deployments/api-deployment.template.yaml | kubectl apply -f -
        
        # Wait for rollout
        kubectl rollout status deployment/api -n production --timeout=300s

  # Deploy Web
  deploy-web:
    name: Deploy Web
    runs-on: ubuntu-latest
    needs: [build-web, deploy-api]
    if: always() && needs.build-web.result == 'success' && (needs.deploy-api.result == 'success' || needs.deploy-api.result == 'skipped')
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER_NAME }}

    - name: Deploy Web
      env:
        NAMESPACE: production
        IMAGE_TAG: ${{ github.sha }}
        ECR_REGISTRY: 306011031365.dkr.ecr.us-east-1.amazonaws.com
        SSL_CERTIFICATE_ARN: ${{ vars.SSL_CERTIFICATE_ARN }}
        API_URL: https://api.ship-nuxt.dedyn.io
        WS_URL: https://api.ship-nuxt.dedyn.io
        WEB_URL: https://ship-nuxt.dedyn.io
        WEB_DOMAIN: ship-nuxt.dedyn.io
        API_DOMAIN: api.ship-nuxt.dedyn.io
      run: |
        # Create namespace
        kubectl apply -f k8s/deployments/namespace.yaml
        
        # Deploy Web
        envsubst < k8s/deployments/web-deployment.template.yaml | kubectl apply -f -
        
        # Deploy Ingress
        envsubst < k8s/deployments/ingress.template.yaml | kubectl apply -f -
        
        # Wait for rollout
        kubectl rollout status deployment/web -n production --timeout=300s

    - name: Verify deployment
      run: |
        echo "=== Pods ==="
        kubectl get pods -n production
        echo ""
        echo "=== Services ==="
        kubectl get services -n production
        echo ""
        echo "=== Ingress ==="
        kubectl get ingress -n production

    - name: Post deployment summary
      run: |
        echo "## üöÄ Automated Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "**Trigger:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üåê Application URLs" >> $GITHUB_STEP_SUMMARY
        echo "- **Web:** https://ship-nuxt.dedyn.io" >> $GITHUB_STEP_SUMMARY
        echo "- **API:** https://api.ship-nuxt.dedyn.io" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üìä Deployment Status" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        kubectl get pods -n production >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
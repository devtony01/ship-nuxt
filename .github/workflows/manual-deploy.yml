name: "Manual Deployment"

on:
  workflow_dispatch:
    inputs:
      service:
        description: 'Service to deploy'
        required: true
        default: 'both'
        type: choice
        options:
        - both
        - api
        - web
      image_tag:
        description: 'Image tag to deploy (default: latest)'
        required: false
        default: 'latest'
        type: string
      force_rebuild:
        description: 'Force rebuild images'
        required: false
        default: false
        type: boolean

env:
  AWS_REGION: us-east-1
  EKS_CLUSTER_NAME: ship-nuxt-v1

jobs:
  # Optional: Build images if force_rebuild is true
  build-api:
    name: Build API
    runs-on: ubuntu-latest
    if: ${{ inputs.force_rebuild && (inputs.service == 'api' || inputs.service == 'both') }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ vars.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and push API image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./apps/api/Dockerfile
        push: true
        tags: |
          ${{ vars.AWS_ACCESS_KEY_ID }}.dkr.ecr.us-east-1.amazonaws.com/ship-nuxt-api:${{ inputs.image_tag }}
          ${{ vars.AWS_ACCESS_KEY_ID }}.dkr.ecr.us-east-1.amazonaws.com/ship-nuxt-api:latest
        build-args: |
          APP_ENV=production

  build-web:
    name: Build Web
    runs-on: ubuntu-latest
    if: ${{ inputs.force_rebuild && (inputs.service == 'web' || inputs.service == 'both') }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ vars.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and push Web image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./apps/web/Dockerfile
        push: true
        tags: |
          ${{ vars.AWS_ACCESS_KEY_ID }}.dkr.ecr.us-east-1.amazonaws.com/ship-nuxt-web:${{ inputs.image_tag }}
          ${{ vars.AWS_ACCESS_KEY_ID }}.dkr.ecr.us-east-1.amazonaws.com/ship-nuxt-web:latest
        build-args: |
          APP_ENV=production

  # Deploy API
  deploy-api:
    name: Deploy API
    runs-on: ubuntu-latest
    needs: build-api
    if: always() && (needs.build-api.result == 'success' || needs.build-api.result == 'skipped') && (inputs.service == 'api' || inputs.service == 'both')
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ vars.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER_NAME }}

    - name: Deploy API
      env:
        NAMESPACE: production
        IMAGE_TAG: ${{ inputs.image_tag }}
        ECR_REGISTRY: ${{ vars.AWS_ACCESS_KEY_ID }}.dkr.ecr.us-east-1.amazonaws.com
        SSL_CERTIFICATE_ARN: ${{ vars.SSL_CERTIFICATE_ARN }}
      run: |
        # Create namespace
        kubectl apply -f k8s/deployments/namespace.yaml
        
        # Deploy API
        envsubst < k8s/deployments/api-deployment.template.yaml | kubectl apply -f -
        
        # Wait for rollout
        kubectl rollout status deployment/api -n production --timeout=300s

  # Deploy Web
  deploy-web:
    name: Deploy Web
    runs-on: ubuntu-latest
    needs: [build-web, deploy-api]
    if: always() && (needs.build-web.result == 'success' || needs.build-web.result == 'skipped') && (inputs.service == 'web' || inputs.service == 'both')
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ vars.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER_NAME }}

    - name: Deploy Web
      env:
        NAMESPACE: production
        IMAGE_TAG: ${{ inputs.image_tag }}
        ECR_REGISTRY: ${{ vars.AWS_ACCESS_KEY_ID }}.dkr.ecr.us-east-1.amazonaws.com
        SSL_CERTIFICATE_ARN: ${{ vars.SSL_CERTIFICATE_ARN }}
        API_URL: https://api.ship-nuxt.dedyn.io
        WS_URL: https://api.ship-nuxt.dedyn.io
        WEB_URL: https://ship-nuxt.dedyn.io
        WEB_DOMAIN: ship-nuxt.dedyn.io
        API_DOMAIN: api.ship-nuxt.dedyn.io
      run: |
        # Create namespace
        kubectl apply -f k8s/deployments/namespace.yaml
        
        # Deploy Web
        envsubst < k8s/deployments/web-deployment.template.yaml | kubectl apply -f -
        
        # Deploy Ingress
        envsubst < k8s/deployments/ingress.template.yaml | kubectl apply -f -
        
        # Wait for rollout
        kubectl rollout status deployment/web -n production --timeout=300s

    - name: Verify deployment
      run: |
        echo "=== Pods ==="
        kubectl get pods -n production
        echo ""
        echo "=== Services ==="
        kubectl get services -n production
        echo ""
        echo "=== Ingress ==="
        kubectl get ingress -n production

    - name: Post deployment summary
      run: |
        echo "## 🚀 Manual Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Service:** ${{ inputs.service }}" >> $GITHUB_STEP_SUMMARY
        echo "**Image Tag:** ${{ inputs.image_tag }}" >> $GITHUB_STEP_SUMMARY
        echo "**Force Rebuild:** ${{ inputs.force_rebuild }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🌐 Application URLs" >> $GITHUB_STEP_SUMMARY
        echo "- **Web:** https://ship-nuxt.dedyn.io" >> $GITHUB_STEP_SUMMARY
        echo "- **API:** https://api.ship-nuxt.dedyn.io" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📊 Deployment Status" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        kubectl get pods -n production >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY